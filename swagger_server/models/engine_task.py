# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.capability import Capability  # noqa: F401,E501
from swagger_server.models.config import Config  # noqa: F401,E501
from swagger_server.models.destination_end_point import DestinationEndPoint  # noqa: F401,E501
from swagger_server.models.engine_task_line_setting import EngineTaskLineSetting  # noqa: F401,E501
from swagger_server.models.engine_task_zone_setting import EngineTaskZoneSetting  # noqa: F401,E501
from swagger_server.models.event_type import EventType  # noqa: F401,E501
from swagger_server.models.links import Links  # noqa: F401,E501
from swagger_server.models.source_end_point import SourceEndPoint  # noqa: F401,E501
from swagger_server import util


class EngineTask(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: str=None, capbilities_type: Capability=None, event_type: EventType=None, engine_machine_id: str=None, is_expired: bool=False, children: List[Capability]=None, time_to_live: int=-1, source: SourceEndPoint=None, destination: DestinationEndPoint=None, zone_setting: EngineTaskZoneSetting=None, line_setting: EngineTaskLineSetting=None, config: List[Config]=None, updated: datetime=None, created: datetime=None, etag: str=None, links: Links=None):  # noqa: E501
        """EngineTask - a model defined in Swagger

        :param id: The id of this EngineTask.  # noqa: E501
        :type id: str
        :param capbilities_type: The capbilities_type of this EngineTask.  # noqa: E501
        :type capbilities_type: Capability
        :param event_type: The event_type of this EngineTask.  # noqa: E501
        :type event_type: EventType
        :param engine_machine_id: The engine_machine_id of this EngineTask.  # noqa: E501
        :type engine_machine_id: str
        :param is_expired: The is_expired of this EngineTask.  # noqa: E501
        :type is_expired: bool
        :param children: The children of this EngineTask.  # noqa: E501
        :type children: List[Capability]
        :param time_to_live: The time_to_live of this EngineTask.  # noqa: E501
        :type time_to_live: int
        :param source: The source of this EngineTask.  # noqa: E501
        :type source: SourceEndPoint
        :param destination: The destination of this EngineTask.  # noqa: E501
        :type destination: DestinationEndPoint
        :param zone_setting: The zone_setting of this EngineTask.  # noqa: E501
        :type zone_setting: EngineTaskZoneSetting
        :param line_setting: The line_setting of this EngineTask.  # noqa: E501
        :type line_setting: EngineTaskLineSetting
        :param config: The config of this EngineTask.  # noqa: E501
        :type config: List[Config]
        :param updated: The updated of this EngineTask.  # noqa: E501
        :type updated: datetime
        :param created: The created of this EngineTask.  # noqa: E501
        :type created: datetime
        :param etag: The etag of this EngineTask.  # noqa: E501
        :type etag: str
        :param links: The links of this EngineTask.  # noqa: E501
        :type links: Links
        """
        self.swagger_types = {
            'id': str,
            'capbilities_type': Capability,
            'event_type': EventType,
            'engine_machine_id': str,
            'is_expired': bool,
            'children': List[Capability],
            'time_to_live': int,
            'source': SourceEndPoint,
            'destination': DestinationEndPoint,
            'zone_setting': EngineTaskZoneSetting,
            'line_setting': EngineTaskLineSetting,
            'config': List[Config],
            'updated': datetime,
            'created': datetime,
            'etag': str,
            'links': Links
        }

        self.attribute_map = {
            'id': '_id',
            'capbilities_type': 'capbilitiesType',
            'event_type': 'eventType',
            'engine_machine_id': 'engineMachineId',
            'is_expired': 'isExpired',
            'children': 'children',
            'time_to_live': 'timeToLive',
            'source': 'source',
            'destination': 'destination',
            'zone_setting': 'zoneSetting',
            'line_setting': 'lineSetting',
            'config': 'config',
            'updated': 'updated',
            'created': 'created',
            'etag': 'etag',
            'links': 'links'
        }
        self._id = id
        self._capbilities_type = capbilities_type
        self._event_type = event_type
        self._engine_machine_id = engine_machine_id
        self._is_expired = is_expired
        self._children = children
        self._time_to_live = time_to_live
        self._source = source
        self._destination = destination
        self._zone_setting = zone_setting
        self._line_setting = line_setting
        self._config = config
        self._updated = updated
        self._created = created
        self._etag = etag
        self._links = links

    @classmethod
    def from_dict(cls, dikt) -> 'EngineTask':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The engineTask of this EngineTask.  # noqa: E501
        :rtype: EngineTask
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this EngineTask.


        :return: The id of this EngineTask.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this EngineTask.


        :param id: The id of this EngineTask.
        :type id: str
        """

        self._id = id

    @property
    def capbilities_type(self) -> Capability:
        """Gets the capbilities_type of this EngineTask.


        :return: The capbilities_type of this EngineTask.
        :rtype: Capability
        """
        return self._capbilities_type

    @capbilities_type.setter
    def capbilities_type(self, capbilities_type: Capability):
        """Sets the capbilities_type of this EngineTask.


        :param capbilities_type: The capbilities_type of this EngineTask.
        :type capbilities_type: Capability
        """

        self._capbilities_type = capbilities_type

    @property
    def event_type(self) -> EventType:
        """Gets the event_type of this EngineTask.


        :return: The event_type of this EngineTask.
        :rtype: EventType
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type: EventType):
        """Sets the event_type of this EngineTask.


        :param event_type: The event_type of this EngineTask.
        :type event_type: EventType
        """

        self._event_type = event_type

    @property
    def engine_machine_id(self) -> str:
        """Gets the engine_machine_id of this EngineTask.


        :return: The engine_machine_id of this EngineTask.
        :rtype: str
        """
        return self._engine_machine_id

    @engine_machine_id.setter
    def engine_machine_id(self, engine_machine_id: str):
        """Sets the engine_machine_id of this EngineTask.


        :param engine_machine_id: The engine_machine_id of this EngineTask.
        :type engine_machine_id: str
        """

        self._engine_machine_id = engine_machine_id

    @property
    def is_expired(self) -> bool:
        """Gets the is_expired of this EngineTask.

        Explanations: * true = Engines will NEVER execute this task * false = Engines will execute this task * Engine must patch this flag to true when completes processing or have found \"timeToLive\" has passed task creation time  # noqa: E501

        :return: The is_expired of this EngineTask.
        :rtype: bool
        """
        return self._is_expired

    @is_expired.setter
    def is_expired(self, is_expired: bool):
        """Sets the is_expired of this EngineTask.

        Explanations: * true = Engines will NEVER execute this task * false = Engines will execute this task * Engine must patch this flag to true when completes processing or have found \"timeToLive\" has passed task creation time  # noqa: E501

        :param is_expired: The is_expired of this EngineTask.
        :type is_expired: bool
        """

        self._is_expired = is_expired

    @property
    def children(self) -> List[Capability]:
        """Gets the children of this EngineTask.


        :return: The children of this EngineTask.
        :rtype: List[Capability]
        """
        return self._children

    @children.setter
    def children(self, children: List[Capability]):
        """Sets the children of this EngineTask.


        :param children: The children of this EngineTask.
        :type children: List[Capability]
        """

        self._children = children

    @property
    def time_to_live(self) -> int:
        """Gets the time_to_live of this EngineTask.

        Time in milliseconds of expiry or the task. Engines will not execute an expired task. Explanations: * -1 = Never expires * -2 = Expired *  0 = Will expire in 0 milliseconds * >0 = This task is invalid and must not be executed after >0 milliseconds from task creation time  # noqa: E501

        :return: The time_to_live of this EngineTask.
        :rtype: int
        """
        return self._time_to_live

    @time_to_live.setter
    def time_to_live(self, time_to_live: int):
        """Sets the time_to_live of this EngineTask.

        Time in milliseconds of expiry or the task. Engines will not execute an expired task. Explanations: * -1 = Never expires * -2 = Expired *  0 = Will expire in 0 milliseconds * >0 = This task is invalid and must not be executed after >0 milliseconds from task creation time  # noqa: E501

        :param time_to_live: The time_to_live of this EngineTask.
        :type time_to_live: int
        """

        self._time_to_live = time_to_live

    @property
    def source(self) -> SourceEndPoint:
        """Gets the source of this EngineTask.


        :return: The source of this EngineTask.
        :rtype: SourceEndPoint
        """
        return self._source

    @source.setter
    def source(self, source: SourceEndPoint):
        """Sets the source of this EngineTask.


        :param source: The source of this EngineTask.
        :type source: SourceEndPoint
        """

        self._source = source

    @property
    def destination(self) -> DestinationEndPoint:
        """Gets the destination of this EngineTask.


        :return: The destination of this EngineTask.
        :rtype: DestinationEndPoint
        """
        return self._destination

    @destination.setter
    def destination(self, destination: DestinationEndPoint):
        """Sets the destination of this EngineTask.


        :param destination: The destination of this EngineTask.
        :type destination: DestinationEndPoint
        """

        self._destination = destination

    @property
    def zone_setting(self) -> EngineTaskZoneSetting:
        """Gets the zone_setting of this EngineTask.


        :return: The zone_setting of this EngineTask.
        :rtype: EngineTaskZoneSetting
        """
        return self._zone_setting

    @zone_setting.setter
    def zone_setting(self, zone_setting: EngineTaskZoneSetting):
        """Sets the zone_setting of this EngineTask.


        :param zone_setting: The zone_setting of this EngineTask.
        :type zone_setting: EngineTaskZoneSetting
        """

        self._zone_setting = zone_setting

    @property
    def line_setting(self) -> EngineTaskLineSetting:
        """Gets the line_setting of this EngineTask.


        :return: The line_setting of this EngineTask.
        :rtype: EngineTaskLineSetting
        """
        return self._line_setting

    @line_setting.setter
    def line_setting(self, line_setting: EngineTaskLineSetting):
        """Sets the line_setting of this EngineTask.


        :param line_setting: The line_setting of this EngineTask.
        :type line_setting: EngineTaskLineSetting
        """

        self._line_setting = line_setting

    @property
    def config(self) -> List[Config]:
        """Gets the config of this EngineTask.


        :return: The config of this EngineTask.
        :rtype: List[Config]
        """
        return self._config

    @config.setter
    def config(self, config: List[Config]):
        """Sets the config of this EngineTask.


        :param config: The config of this EngineTask.
        :type config: List[Config]
        """

        self._config = config

    @property
    def updated(self) -> datetime:
        """Gets the updated of this EngineTask.


        :return: The updated of this EngineTask.
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated: datetime):
        """Sets the updated of this EngineTask.


        :param updated: The updated of this EngineTask.
        :type updated: datetime
        """

        self._updated = updated

    @property
    def created(self) -> datetime:
        """Gets the created of this EngineTask.


        :return: The created of this EngineTask.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created: datetime):
        """Sets the created of this EngineTask.


        :param created: The created of this EngineTask.
        :type created: datetime
        """

        self._created = created

    @property
    def etag(self) -> str:
        """Gets the etag of this EngineTask.


        :return: The etag of this EngineTask.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag: str):
        """Sets the etag of this EngineTask.


        :param etag: The etag of this EngineTask.
        :type etag: str
        """

        self._etag = etag

    @property
    def links(self) -> Links:
        """Gets the links of this EngineTask.


        :return: The links of this EngineTask.
        :rtype: Links
        """
        return self._links

    @links.setter
    def links(self, links: Links):
        """Sets the links of this EngineTask.


        :param links: The links of this EngineTask.
        :type links: Links
        """

        self._links = links
