# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.extra import Extra  # noqa: F401,E501
from swagger_server import util


class EventDetails(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, job_id: str=None, camera_id: str=None, camera_ip: str=None, camera_name: str=None, is_valid: bool=False, is_restricted: bool=True, source_id: str=None, engine_task_id: str=None, zone_id: int=0, confidence: float=0, start_time_stamp: int=None, end_time_stamp: int=None, video_file_name: str=None, capture_time_in_video: int=-1, gdpr_enabled: bool=False, latitude: float=0, longitude: float=0, extras: List[Extra]=None):  # noqa: E501
        """EventDetails - a model defined in Swagger

        :param job_id: The job_id of this EventDetails.  # noqa: E501
        :type job_id: str
        :param camera_id: The camera_id of this EventDetails.  # noqa: E501
        :type camera_id: str
        :param camera_ip: The camera_ip of this EventDetails.  # noqa: E501
        :type camera_ip: str
        :param camera_name: The camera_name of this EventDetails.  # noqa: E501
        :type camera_name: str
        :param is_valid: The is_valid of this EventDetails.  # noqa: E501
        :type is_valid: bool
        :param is_restricted: The is_restricted of this EventDetails.  # noqa: E501
        :type is_restricted: bool
        :param source_id: The source_id of this EventDetails.  # noqa: E501
        :type source_id: str
        :param engine_task_id: The engine_task_id of this EventDetails.  # noqa: E501
        :type engine_task_id: str
        :param zone_id: The zone_id of this EventDetails.  # noqa: E501
        :type zone_id: int
        :param confidence: The confidence of this EventDetails.  # noqa: E501
        :type confidence: float
        :param start_time_stamp: The start_time_stamp of this EventDetails.  # noqa: E501
        :type start_time_stamp: int
        :param end_time_stamp: The end_time_stamp of this EventDetails.  # noqa: E501
        :type end_time_stamp: int
        :param video_file_name: The video_file_name of this EventDetails.  # noqa: E501
        :type video_file_name: str
        :param capture_time_in_video: The capture_time_in_video of this EventDetails.  # noqa: E501
        :type capture_time_in_video: int
        :param gdpr_enabled: The gdpr_enabled of this EventDetails.  # noqa: E501
        :type gdpr_enabled: bool
        :param latitude: The latitude of this EventDetails.  # noqa: E501
        :type latitude: float
        :param longitude: The longitude of this EventDetails.  # noqa: E501
        :type longitude: float
        :param extras: The extras of this EventDetails.  # noqa: E501
        :type extras: List[Extra]
        """
        self.swagger_types = {
            'job_id': str,
            'camera_id': str,
            'camera_ip': str,
            'camera_name': str,
            'is_valid': bool,
            'is_restricted': bool,
            'source_id': str,
            'engine_task_id': str,
            'zone_id': int,
            'confidence': float,
            'start_time_stamp': int,
            'end_time_stamp': int,
            'video_file_name': str,
            'capture_time_in_video': int,
            'gdpr_enabled': bool,
            'latitude': float,
            'longitude': float,
            'extras': List[Extra]
        }

        self.attribute_map = {
            'job_id': 'jobId',
            'camera_id': 'cameraId',
            'camera_ip': 'cameraIp',
            'camera_name': 'cameraName',
            'is_valid': 'isValid',
            'is_restricted': 'isRestricted',
            'source_id': 'sourceId',
            'engine_task_id': 'engineTaskId',
            'zone_id': 'zoneId',
            'confidence': 'confidence',
            'start_time_stamp': 'startTimeStamp',
            'end_time_stamp': 'endTimeStamp',
            'video_file_name': 'videoFileName',
            'capture_time_in_video': 'captureTimeInVideo',
            'gdpr_enabled': 'gdprEnabled',
            'latitude': 'latitude',
            'longitude': 'longitude',
            'extras': 'extras'
        }
        self._job_id = job_id
        self._camera_id = camera_id
        self._camera_ip = camera_ip
        self._camera_name = camera_name
        self._is_valid = is_valid
        self._is_restricted = is_restricted
        self._source_id = source_id
        self._engine_task_id = engine_task_id
        self._zone_id = zone_id
        self._confidence = confidence
        self._start_time_stamp = start_time_stamp
        self._end_time_stamp = end_time_stamp
        self._video_file_name = video_file_name
        self._capture_time_in_video = capture_time_in_video
        self._gdpr_enabled = gdpr_enabled
        self._latitude = latitude
        self._longitude = longitude
        self._extras = extras

    @classmethod
    def from_dict(cls, dikt) -> 'EventDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The eventDetails of this EventDetails.  # noqa: E501
        :rtype: EventDetails
        """
        return util.deserialize_model(dikt, cls)

    @property
    def job_id(self) -> str:
        """Gets the job_id of this EventDetails.


        :return: The job_id of this EventDetails.
        :rtype: str
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id: str):
        """Sets the job_id of this EventDetails.


        :param job_id: The job_id of this EventDetails.
        :type job_id: str
        """

        self._job_id = job_id

    @property
    def camera_id(self) -> str:
        """Gets the camera_id of this EventDetails.

        _id of camera #$ref: '#/components/schemas/camera' from project cameras  # noqa: E501

        :return: The camera_id of this EventDetails.
        :rtype: str
        """
        return self._camera_id

    @camera_id.setter
    def camera_id(self, camera_id: str):
        """Sets the camera_id of this EventDetails.

        _id of camera #$ref: '#/components/schemas/camera' from project cameras  # noqa: E501

        :param camera_id: The camera_id of this EventDetails.
        :type camera_id: str
        """

        self._camera_id = camera_id

    @property
    def camera_ip(self) -> str:
        """Gets the camera_ip of this EventDetails.


        :return: The camera_ip of this EventDetails.
        :rtype: str
        """
        return self._camera_ip

    @camera_ip.setter
    def camera_ip(self, camera_ip: str):
        """Sets the camera_ip of this EventDetails.


        :param camera_ip: The camera_ip of this EventDetails.
        :type camera_ip: str
        """

        self._camera_ip = camera_ip

    @property
    def camera_name(self) -> str:
        """Gets the camera_name of this EventDetails.


        :return: The camera_name of this EventDetails.
        :rtype: str
        """
        return self._camera_name

    @camera_name.setter
    def camera_name(self, camera_name: str):
        """Sets the camera_name of this EventDetails.


        :param camera_name: The camera_name of this EventDetails.
        :type camera_name: str
        """

        self._camera_name = camera_name

    @property
    def is_valid(self) -> bool:
        """Gets the is_valid of this EventDetails.

        If event validated by operator/admin  # noqa: E501

        :return: The is_valid of this EventDetails.
        :rtype: bool
        """
        return self._is_valid

    @is_valid.setter
    def is_valid(self, is_valid: bool):
        """Sets the is_valid of this EventDetails.

        If event validated by operator/admin  # noqa: E501

        :param is_valid: The is_valid of this EventDetails.
        :type is_valid: bool
        """

        self._is_valid = is_valid

    @property
    def is_restricted(self) -> bool:
        """Gets the is_restricted of this EventDetails.

        If event validated by operator/admin  # noqa: E501

        :return: The is_restricted of this EventDetails.
        :rtype: bool
        """
        return self._is_restricted

    @is_restricted.setter
    def is_restricted(self, is_restricted: bool):
        """Sets the is_restricted of this EventDetails.

        If event validated by operator/admin  # noqa: E501

        :param is_restricted: The is_restricted of this EventDetails.
        :type is_restricted: bool
        """

        self._is_restricted = is_restricted

    @property
    def source_id(self) -> str:
        """Gets the source_id of this EventDetails.

        _id of camera #$ref: '#/components/schemas/camera' from project cameras  # noqa: E501

        :return: The source_id of this EventDetails.
        :rtype: str
        """
        return self._source_id

    @source_id.setter
    def source_id(self, source_id: str):
        """Sets the source_id of this EventDetails.

        _id of camera #$ref: '#/components/schemas/camera' from project cameras  # noqa: E501

        :param source_id: The source_id of this EventDetails.
        :type source_id: str
        """

        self._source_id = source_id

    @property
    def engine_task_id(self) -> str:
        """Gets the engine_task_id of this EventDetails.

        _id of engineTasks #$ref: '#/components/schemas/engineTasks'  # noqa: E501

        :return: The engine_task_id of this EventDetails.
        :rtype: str
        """
        return self._engine_task_id

    @engine_task_id.setter
    def engine_task_id(self, engine_task_id: str):
        """Sets the engine_task_id of this EventDetails.

        _id of engineTasks #$ref: '#/components/schemas/engineTasks'  # noqa: E501

        :param engine_task_id: The engine_task_id of this EventDetails.
        :type engine_task_id: str
        """

        self._engine_task_id = engine_task_id

    @property
    def zone_id(self) -> int:
        """Gets the zone_id of this EventDetails.

        the zoneId of the engineTask in zoneSetting, #$ref: '#/components/schemas/zone'  # noqa: E501

        :return: The zone_id of this EventDetails.
        :rtype: int
        """
        return self._zone_id

    @zone_id.setter
    def zone_id(self, zone_id: int):
        """Sets the zone_id of this EventDetails.

        the zoneId of the engineTask in zoneSetting, #$ref: '#/components/schemas/zone'  # noqa: E501

        :param zone_id: The zone_id of this EventDetails.
        :type zone_id: int
        """

        self._zone_id = zone_id

    @property
    def confidence(self) -> float:
        """Gets the confidence of this EventDetails.

        match confidence predicted by engine during event detection  # noqa: E501

        :return: The confidence of this EventDetails.
        :rtype: float
        """
        return self._confidence

    @confidence.setter
    def confidence(self, confidence: float):
        """Sets the confidence of this EventDetails.

        match confidence predicted by engine during event detection  # noqa: E501

        :param confidence: The confidence of this EventDetails.
        :type confidence: float
        """

        self._confidence = confidence

    @property
    def start_time_stamp(self) -> int:
        """Gets the start_time_stamp of this EventDetails.

        Event start timestamp in Unix epoch milliseconds  # noqa: E501

        :return: The start_time_stamp of this EventDetails.
        :rtype: int
        """
        return self._start_time_stamp

    @start_time_stamp.setter
    def start_time_stamp(self, start_time_stamp: int):
        """Sets the start_time_stamp of this EventDetails.

        Event start timestamp in Unix epoch milliseconds  # noqa: E501

        :param start_time_stamp: The start_time_stamp of this EventDetails.
        :type start_time_stamp: int
        """

        self._start_time_stamp = start_time_stamp

    @property
    def end_time_stamp(self) -> int:
        """Gets the end_time_stamp of this EventDetails.

        Event end timestamp in Unix epoch milliseconds  # noqa: E501

        :return: The end_time_stamp of this EventDetails.
        :rtype: int
        """
        return self._end_time_stamp

    @end_time_stamp.setter
    def end_time_stamp(self, end_time_stamp: int):
        """Sets the end_time_stamp of this EventDetails.

        Event end timestamp in Unix epoch milliseconds  # noqa: E501

        :param end_time_stamp: The end_time_stamp of this EventDetails.
        :type end_time_stamp: int
        """

        self._end_time_stamp = end_time_stamp

    @property
    def video_file_name(self) -> str:
        """Gets the video_file_name of this EventDetails.

        Video file name if it is present  # noqa: E501

        :return: The video_file_name of this EventDetails.
        :rtype: str
        """
        return self._video_file_name

    @video_file_name.setter
    def video_file_name(self, video_file_name: str):
        """Sets the video_file_name of this EventDetails.

        Video file name if it is present  # noqa: E501

        :param video_file_name: The video_file_name of this EventDetails.
        :type video_file_name: str
        """

        self._video_file_name = video_file_name

    @property
    def capture_time_in_video(self) -> int:
        """Gets the capture_time_in_video of this EventDetails.

        Event timestamp in video in Unix epoch milliseconds  # noqa: E501

        :return: The capture_time_in_video of this EventDetails.
        :rtype: int
        """
        return self._capture_time_in_video

    @capture_time_in_video.setter
    def capture_time_in_video(self, capture_time_in_video: int):
        """Sets the capture_time_in_video of this EventDetails.

        Event timestamp in video in Unix epoch milliseconds  # noqa: E501

        :param capture_time_in_video: The capture_time_in_video of this EventDetails.
        :type capture_time_in_video: int
        """

        self._capture_time_in_video = capture_time_in_video

    @property
    def gdpr_enabled(self) -> bool:
        """Gets the gdpr_enabled of this EventDetails.

        If gdpr enabled by admin  # noqa: E501

        :return: The gdpr_enabled of this EventDetails.
        :rtype: bool
        """
        return self._gdpr_enabled

    @gdpr_enabled.setter
    def gdpr_enabled(self, gdpr_enabled: bool):
        """Sets the gdpr_enabled of this EventDetails.

        If gdpr enabled by admin  # noqa: E501

        :param gdpr_enabled: The gdpr_enabled of this EventDetails.
        :type gdpr_enabled: bool
        """

        self._gdpr_enabled = gdpr_enabled

    @property
    def latitude(self) -> float:
        """Gets the latitude of this EventDetails.


        :return: The latitude of this EventDetails.
        :rtype: float
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude: float):
        """Sets the latitude of this EventDetails.


        :param latitude: The latitude of this EventDetails.
        :type latitude: float
        """

        self._latitude = latitude

    @property
    def longitude(self) -> float:
        """Gets the longitude of this EventDetails.


        :return: The longitude of this EventDetails.
        :rtype: float
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude: float):
        """Sets the longitude of this EventDetails.


        :param longitude: The longitude of this EventDetails.
        :type longitude: float
        """

        self._longitude = longitude

    @property
    def extras(self) -> List[Extra]:
        """Gets the extras of this EventDetails.


        :return: The extras of this EventDetails.
        :rtype: List[Extra]
        """
        return self._extras

    @extras.setter
    def extras(self, extras: List[Extra]):
        """Sets the extras of this EventDetails.


        :param extras: The extras of this EventDetails.
        :type extras: List[Extra]
        """

        self._extras = extras
