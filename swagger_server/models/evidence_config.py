# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.schedule_source import ScheduleSource  # noqa: F401,E501
from swagger_server import util


class EvidenceConfig(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, source: ScheduleSource=None, count: int=1, pre_event_sec: int=0, post_event_sec: int=0):  # noqa: E501
        """EvidenceConfig - a model defined in Swagger

        :param source: The source of this EvidenceConfig.  # noqa: E501
        :type source: ScheduleSource
        :param count: The count of this EvidenceConfig.  # noqa: E501
        :type count: int
        :param pre_event_sec: The pre_event_sec of this EvidenceConfig.  # noqa: E501
        :type pre_event_sec: int
        :param post_event_sec: The post_event_sec of this EvidenceConfig.  # noqa: E501
        :type post_event_sec: int
        """
        self.swagger_types = {
            'source': ScheduleSource,
            'count': int,
            'pre_event_sec': int,
            'post_event_sec': int
        }

        self.attribute_map = {
            'source': 'source',
            'count': 'count',
            'pre_event_sec': 'preEventSec',
            'post_event_sec': 'postEventSec'
        }
        self._source = source
        self._count = count
        self._pre_event_sec = pre_event_sec
        self._post_event_sec = post_event_sec

    @classmethod
    def from_dict(cls, dikt) -> 'EvidenceConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The evidenceConfig of this EvidenceConfig.  # noqa: E501
        :rtype: EvidenceConfig
        """
        return util.deserialize_model(dikt, cls)

    @property
    def source(self) -> ScheduleSource:
        """Gets the source of this EvidenceConfig.


        :return: The source of this EvidenceConfig.
        :rtype: ScheduleSource
        """
        return self._source

    @source.setter
    def source(self, source: ScheduleSource):
        """Sets the source of this EvidenceConfig.


        :param source: The source of this EvidenceConfig.
        :type source: ScheduleSource
        """

        self._source = source

    @property
    def count(self) -> int:
        """Gets the count of this EvidenceConfig.


        :return: The count of this EvidenceConfig.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count: int):
        """Sets the count of this EvidenceConfig.


        :param count: The count of this EvidenceConfig.
        :type count: int
        """

        self._count = count

    @property
    def pre_event_sec(self) -> int:
        """Gets the pre_event_sec of this EvidenceConfig.


        :return: The pre_event_sec of this EvidenceConfig.
        :rtype: int
        """
        return self._pre_event_sec

    @pre_event_sec.setter
    def pre_event_sec(self, pre_event_sec: int):
        """Sets the pre_event_sec of this EvidenceConfig.


        :param pre_event_sec: The pre_event_sec of this EvidenceConfig.
        :type pre_event_sec: int
        """

        self._pre_event_sec = pre_event_sec

    @property
    def post_event_sec(self) -> int:
        """Gets the post_event_sec of this EvidenceConfig.


        :return: The post_event_sec of this EvidenceConfig.
        :rtype: int
        """
        return self._post_event_sec

    @post_event_sec.setter
    def post_event_sec(self, post_event_sec: int):
        """Sets the post_event_sec of this EvidenceConfig.


        :param post_event_sec: The post_event_sec of this EvidenceConfig.
        :type post_event_sec: int
        """

        self._post_event_sec = post_event_sec
