# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class HumanProperties(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, gender: str=None, top_attire_color: str=None, bottom_attire_color: str=None, top_type: str=None, bottom_type: str=None, is_long_sleeve: str=None, is_headdress_present: str=None, is_bag_present: str=None):  # noqa: E501
        """HumanProperties - a model defined in Swagger

        :param gender: The gender of this HumanProperties.  # noqa: E501
        :type gender: str
        :param top_attire_color: The top_attire_color of this HumanProperties.  # noqa: E501
        :type top_attire_color: str
        :param bottom_attire_color: The bottom_attire_color of this HumanProperties.  # noqa: E501
        :type bottom_attire_color: str
        :param top_type: The top_type of this HumanProperties.  # noqa: E501
        :type top_type: str
        :param bottom_type: The bottom_type of this HumanProperties.  # noqa: E501
        :type bottom_type: str
        :param is_long_sleeve: The is_long_sleeve of this HumanProperties.  # noqa: E501
        :type is_long_sleeve: str
        :param is_headdress_present: The is_headdress_present of this HumanProperties.  # noqa: E501
        :type is_headdress_present: str
        :param is_bag_present: The is_bag_present of this HumanProperties.  # noqa: E501
        :type is_bag_present: str
        """
        self.swagger_types = {
            'gender': str,
            'top_attire_color': str,
            'bottom_attire_color': str,
            'top_type': str,
            'bottom_type': str,
            'is_long_sleeve': str,
            'is_headdress_present': str,
            'is_bag_present': str
        }

        self.attribute_map = {
            'gender': 'gender',
            'top_attire_color': 'topAttireColor',
            'bottom_attire_color': 'bottomAttireColor',
            'top_type': 'topType',
            'bottom_type': 'bottomType',
            'is_long_sleeve': 'isLongSleeve',
            'is_headdress_present': 'isHeaddressPresent',
            'is_bag_present': 'isBagPresent'
        }
        self._gender = gender
        self._top_attire_color = top_attire_color
        self._bottom_attire_color = bottom_attire_color
        self._top_type = top_type
        self._bottom_type = bottom_type
        self._is_long_sleeve = is_long_sleeve
        self._is_headdress_present = is_headdress_present
        self._is_bag_present = is_bag_present

    @classmethod
    def from_dict(cls, dikt) -> 'HumanProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The humanProperties of this HumanProperties.  # noqa: E501
        :rtype: HumanProperties
        """
        return util.deserialize_model(dikt, cls)

    @property
    def gender(self) -> str:
        """Gets the gender of this HumanProperties.


        :return: The gender of this HumanProperties.
        :rtype: str
        """
        return self._gender

    @gender.setter
    def gender(self, gender: str):
        """Sets the gender of this HumanProperties.


        :param gender: The gender of this HumanProperties.
        :type gender: str
        """

        self._gender = gender

    @property
    def top_attire_color(self) -> str:
        """Gets the top_attire_color of this HumanProperties.


        :return: The top_attire_color of this HumanProperties.
        :rtype: str
        """
        return self._top_attire_color

    @top_attire_color.setter
    def top_attire_color(self, top_attire_color: str):
        """Sets the top_attire_color of this HumanProperties.


        :param top_attire_color: The top_attire_color of this HumanProperties.
        :type top_attire_color: str
        """

        self._top_attire_color = top_attire_color

    @property
    def bottom_attire_color(self) -> str:
        """Gets the bottom_attire_color of this HumanProperties.


        :return: The bottom_attire_color of this HumanProperties.
        :rtype: str
        """
        return self._bottom_attire_color

    @bottom_attire_color.setter
    def bottom_attire_color(self, bottom_attire_color: str):
        """Sets the bottom_attire_color of this HumanProperties.


        :param bottom_attire_color: The bottom_attire_color of this HumanProperties.
        :type bottom_attire_color: str
        """

        self._bottom_attire_color = bottom_attire_color

    @property
    def top_type(self) -> str:
        """Gets the top_type of this HumanProperties.


        :return: The top_type of this HumanProperties.
        :rtype: str
        """
        return self._top_type

    @top_type.setter
    def top_type(self, top_type: str):
        """Sets the top_type of this HumanProperties.


        :param top_type: The top_type of this HumanProperties.
        :type top_type: str
        """

        self._top_type = top_type

    @property
    def bottom_type(self) -> str:
        """Gets the bottom_type of this HumanProperties.


        :return: The bottom_type of this HumanProperties.
        :rtype: str
        """
        return self._bottom_type

    @bottom_type.setter
    def bottom_type(self, bottom_type: str):
        """Sets the bottom_type of this HumanProperties.


        :param bottom_type: The bottom_type of this HumanProperties.
        :type bottom_type: str
        """

        self._bottom_type = bottom_type

    @property
    def is_long_sleeve(self) -> str:
        """Gets the is_long_sleeve of this HumanProperties.


        :return: The is_long_sleeve of this HumanProperties.
        :rtype: str
        """
        return self._is_long_sleeve

    @is_long_sleeve.setter
    def is_long_sleeve(self, is_long_sleeve: str):
        """Sets the is_long_sleeve of this HumanProperties.


        :param is_long_sleeve: The is_long_sleeve of this HumanProperties.
        :type is_long_sleeve: str
        """

        self._is_long_sleeve = is_long_sleeve

    @property
    def is_headdress_present(self) -> str:
        """Gets the is_headdress_present of this HumanProperties.


        :return: The is_headdress_present of this HumanProperties.
        :rtype: str
        """
        return self._is_headdress_present

    @is_headdress_present.setter
    def is_headdress_present(self, is_headdress_present: str):
        """Sets the is_headdress_present of this HumanProperties.


        :param is_headdress_present: The is_headdress_present of this HumanProperties.
        :type is_headdress_present: str
        """

        self._is_headdress_present = is_headdress_present

    @property
    def is_bag_present(self) -> str:
        """Gets the is_bag_present of this HumanProperties.


        :return: The is_bag_present of this HumanProperties.
        :rtype: str
        """
        return self._is_bag_present

    @is_bag_present.setter
    def is_bag_present(self, is_bag_present: str):
        """Sets the is_bag_present of this HumanProperties.


        :param is_bag_present: The is_bag_present of this HumanProperties.
        :type is_bag_present: str
        """

        self._is_bag_present = is_bag_present
