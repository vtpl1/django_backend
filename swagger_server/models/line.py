# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.config import Config  # noqa: F401,E501
from swagger_server.models.line_type import LineType  # noqa: F401,E501
from swagger_server.models.vertex import Vertex  # noqa: F401,E501
from swagger_server import util


class Line(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: int=1, line_type: LineType=None, vertices: List[Vertex]=None, config: List[Config]=None):  # noqa: E501
        """Line - a model defined in Swagger

        :param id: The id of this Line.  # noqa: E501
        :type id: int
        :param line_type: The line_type of this Line.  # noqa: E501
        :type line_type: LineType
        :param vertices: The vertices of this Line.  # noqa: E501
        :type vertices: List[Vertex]
        :param config: The config of this Line.  # noqa: E501
        :type config: List[Config]
        """
        self.swagger_types = {
            'id': int,
            'line_type': LineType,
            'vertices': List[Vertex],
            'config': List[Config]
        }

        self.attribute_map = {
            'id': 'id',
            'line_type': 'lineType',
            'vertices': 'vertices',
            'config': 'config'
        }
        self._id = id
        self._line_type = line_type
        self._vertices = vertices
        self._config = config

    @classmethod
    def from_dict(cls, dikt) -> 'Line':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The line of this Line.  # noqa: E501
        :rtype: Line
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this Line.


        :return: The id of this Line.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this Line.


        :param id: The id of this Line.
        :type id: int
        """

        self._id = id

    @property
    def line_type(self) -> LineType:
        """Gets the line_type of this Line.


        :return: The line_type of this Line.
        :rtype: LineType
        """
        return self._line_type

    @line_type.setter
    def line_type(self, line_type: LineType):
        """Sets the line_type of this Line.


        :param line_type: The line_type of this Line.
        :type line_type: LineType
        """

        self._line_type = line_type

    @property
    def vertices(self) -> List[Vertex]:
        """Gets the vertices of this Line.


        :return: The vertices of this Line.
        :rtype: List[Vertex]
        """
        return self._vertices

    @vertices.setter
    def vertices(self, vertices: List[Vertex]):
        """Sets the vertices of this Line.


        :param vertices: The vertices of this Line.
        :type vertices: List[Vertex]
        """

        self._vertices = vertices

    @property
    def config(self) -> List[Config]:
        """Gets the config of this Line.


        :return: The config of this Line.
        :rtype: List[Config]
        """
        return self._config

    @config.setter
    def config(self, config: List[Config]):
        """Sets the config of this Line.


        :param config: The config of this Line.
        :type config: List[Config]
        """

        self._config = config
