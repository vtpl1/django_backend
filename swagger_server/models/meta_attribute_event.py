# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class MetaAttributeEvent(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, estimated_height: int=0, top_type: str=None, top_color: str=None, bottom_type: str=None, bottom_color: str=None, sex: str=None, presence_of_bag: bool=None, type_of_bag: str=None, clothing_pattern: str=None, presence_of_heade_dress: bool=None, type_of_head_dress: str=None, associated_object: str=None):  # noqa: E501
        """MetaAttributeEvent - a model defined in Swagger

        :param estimated_height: The estimated_height of this MetaAttributeEvent.  # noqa: E501
        :type estimated_height: int
        :param top_type: The top_type of this MetaAttributeEvent.  # noqa: E501
        :type top_type: str
        :param top_color: The top_color of this MetaAttributeEvent.  # noqa: E501
        :type top_color: str
        :param bottom_type: The bottom_type of this MetaAttributeEvent.  # noqa: E501
        :type bottom_type: str
        :param bottom_color: The bottom_color of this MetaAttributeEvent.  # noqa: E501
        :type bottom_color: str
        :param sex: The sex of this MetaAttributeEvent.  # noqa: E501
        :type sex: str
        :param presence_of_bag: The presence_of_bag of this MetaAttributeEvent.  # noqa: E501
        :type presence_of_bag: bool
        :param type_of_bag: The type_of_bag of this MetaAttributeEvent.  # noqa: E501
        :type type_of_bag: str
        :param clothing_pattern: The clothing_pattern of this MetaAttributeEvent.  # noqa: E501
        :type clothing_pattern: str
        :param presence_of_heade_dress: The presence_of_heade_dress of this MetaAttributeEvent.  # noqa: E501
        :type presence_of_heade_dress: bool
        :param type_of_head_dress: The type_of_head_dress of this MetaAttributeEvent.  # noqa: E501
        :type type_of_head_dress: str
        :param associated_object: The associated_object of this MetaAttributeEvent.  # noqa: E501
        :type associated_object: str
        """
        self.swagger_types = {
            'estimated_height': int,
            'top_type': str,
            'top_color': str,
            'bottom_type': str,
            'bottom_color': str,
            'sex': str,
            'presence_of_bag': bool,
            'type_of_bag': str,
            'clothing_pattern': str,
            'presence_of_heade_dress': bool,
            'type_of_head_dress': str,
            'associated_object': str
        }

        self.attribute_map = {
            'estimated_height': 'estimatedHeight',
            'top_type': 'topType',
            'top_color': 'topColor',
            'bottom_type': 'bottomType',
            'bottom_color': 'bottomColor',
            'sex': 'sex',
            'presence_of_bag': 'presenceOfBag',
            'type_of_bag': 'typeOfBag',
            'clothing_pattern': 'clothingPattern',
            'presence_of_heade_dress': 'presenceOfHeadeDress',
            'type_of_head_dress': 'typeOfHeadDress',
            'associated_object': 'associatedObject'
        }
        self._estimated_height = estimated_height
        self._top_type = top_type
        self._top_color = top_color
        self._bottom_type = bottom_type
        self._bottom_color = bottom_color
        self._sex = sex
        self._presence_of_bag = presence_of_bag
        self._type_of_bag = type_of_bag
        self._clothing_pattern = clothing_pattern
        self._presence_of_heade_dress = presence_of_heade_dress
        self._type_of_head_dress = type_of_head_dress
        self._associated_object = associated_object

    @classmethod
    def from_dict(cls, dikt) -> 'MetaAttributeEvent':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The metaAttributeEvent of this MetaAttributeEvent.  # noqa: E501
        :rtype: MetaAttributeEvent
        """
        return util.deserialize_model(dikt, cls)

    @property
    def estimated_height(self) -> int:
        """Gets the estimated_height of this MetaAttributeEvent.


        :return: The estimated_height of this MetaAttributeEvent.
        :rtype: int
        """
        return self._estimated_height

    @estimated_height.setter
    def estimated_height(self, estimated_height: int):
        """Sets the estimated_height of this MetaAttributeEvent.


        :param estimated_height: The estimated_height of this MetaAttributeEvent.
        :type estimated_height: int
        """

        self._estimated_height = estimated_height

    @property
    def top_type(self) -> str:
        """Gets the top_type of this MetaAttributeEvent.


        :return: The top_type of this MetaAttributeEvent.
        :rtype: str
        """
        return self._top_type

    @top_type.setter
    def top_type(self, top_type: str):
        """Sets the top_type of this MetaAttributeEvent.


        :param top_type: The top_type of this MetaAttributeEvent.
        :type top_type: str
        """

        self._top_type = top_type

    @property
    def top_color(self) -> str:
        """Gets the top_color of this MetaAttributeEvent.


        :return: The top_color of this MetaAttributeEvent.
        :rtype: str
        """
        return self._top_color

    @top_color.setter
    def top_color(self, top_color: str):
        """Sets the top_color of this MetaAttributeEvent.


        :param top_color: The top_color of this MetaAttributeEvent.
        :type top_color: str
        """

        self._top_color = top_color

    @property
    def bottom_type(self) -> str:
        """Gets the bottom_type of this MetaAttributeEvent.


        :return: The bottom_type of this MetaAttributeEvent.
        :rtype: str
        """
        return self._bottom_type

    @bottom_type.setter
    def bottom_type(self, bottom_type: str):
        """Sets the bottom_type of this MetaAttributeEvent.


        :param bottom_type: The bottom_type of this MetaAttributeEvent.
        :type bottom_type: str
        """

        self._bottom_type = bottom_type

    @property
    def bottom_color(self) -> str:
        """Gets the bottom_color of this MetaAttributeEvent.


        :return: The bottom_color of this MetaAttributeEvent.
        :rtype: str
        """
        return self._bottom_color

    @bottom_color.setter
    def bottom_color(self, bottom_color: str):
        """Sets the bottom_color of this MetaAttributeEvent.


        :param bottom_color: The bottom_color of this MetaAttributeEvent.
        :type bottom_color: str
        """

        self._bottom_color = bottom_color

    @property
    def sex(self) -> str:
        """Gets the sex of this MetaAttributeEvent.


        :return: The sex of this MetaAttributeEvent.
        :rtype: str
        """
        return self._sex

    @sex.setter
    def sex(self, sex: str):
        """Sets the sex of this MetaAttributeEvent.


        :param sex: The sex of this MetaAttributeEvent.
        :type sex: str
        """

        self._sex = sex

    @property
    def presence_of_bag(self) -> bool:
        """Gets the presence_of_bag of this MetaAttributeEvent.


        :return: The presence_of_bag of this MetaAttributeEvent.
        :rtype: bool
        """
        return self._presence_of_bag

    @presence_of_bag.setter
    def presence_of_bag(self, presence_of_bag: bool):
        """Sets the presence_of_bag of this MetaAttributeEvent.


        :param presence_of_bag: The presence_of_bag of this MetaAttributeEvent.
        :type presence_of_bag: bool
        """

        self._presence_of_bag = presence_of_bag

    @property
    def type_of_bag(self) -> str:
        """Gets the type_of_bag of this MetaAttributeEvent.


        :return: The type_of_bag of this MetaAttributeEvent.
        :rtype: str
        """
        return self._type_of_bag

    @type_of_bag.setter
    def type_of_bag(self, type_of_bag: str):
        """Sets the type_of_bag of this MetaAttributeEvent.


        :param type_of_bag: The type_of_bag of this MetaAttributeEvent.
        :type type_of_bag: str
        """

        self._type_of_bag = type_of_bag

    @property
    def clothing_pattern(self) -> str:
        """Gets the clothing_pattern of this MetaAttributeEvent.


        :return: The clothing_pattern of this MetaAttributeEvent.
        :rtype: str
        """
        return self._clothing_pattern

    @clothing_pattern.setter
    def clothing_pattern(self, clothing_pattern: str):
        """Sets the clothing_pattern of this MetaAttributeEvent.


        :param clothing_pattern: The clothing_pattern of this MetaAttributeEvent.
        :type clothing_pattern: str
        """

        self._clothing_pattern = clothing_pattern

    @property
    def presence_of_heade_dress(self) -> bool:
        """Gets the presence_of_heade_dress of this MetaAttributeEvent.


        :return: The presence_of_heade_dress of this MetaAttributeEvent.
        :rtype: bool
        """
        return self._presence_of_heade_dress

    @presence_of_heade_dress.setter
    def presence_of_heade_dress(self, presence_of_heade_dress: bool):
        """Sets the presence_of_heade_dress of this MetaAttributeEvent.


        :param presence_of_heade_dress: The presence_of_heade_dress of this MetaAttributeEvent.
        :type presence_of_heade_dress: bool
        """

        self._presence_of_heade_dress = presence_of_heade_dress

    @property
    def type_of_head_dress(self) -> str:
        """Gets the type_of_head_dress of this MetaAttributeEvent.


        :return: The type_of_head_dress of this MetaAttributeEvent.
        :rtype: str
        """
        return self._type_of_head_dress

    @type_of_head_dress.setter
    def type_of_head_dress(self, type_of_head_dress: str):
        """Sets the type_of_head_dress of this MetaAttributeEvent.


        :param type_of_head_dress: The type_of_head_dress of this MetaAttributeEvent.
        :type type_of_head_dress: str
        """

        self._type_of_head_dress = type_of_head_dress

    @property
    def associated_object(self) -> str:
        """Gets the associated_object of this MetaAttributeEvent.


        :return: The associated_object of this MetaAttributeEvent.
        :rtype: str
        """
        return self._associated_object

    @associated_object.setter
    def associated_object(self, associated_object: str):
        """Sets the associated_object of this MetaAttributeEvent.


        :param associated_object: The associated_object of this MetaAttributeEvent.
        :type associated_object: str
        """

        self._associated_object = associated_object
