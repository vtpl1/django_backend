# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.links import Links  # noqa: F401,E501
from swagger_server import util


class Snap(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: str=None, snap: str=None, full_snap: str='', snap_id: str=None, snap_time_stamp: int=None, process_count: int=0, registered_face_id: str='0', feature_vector1: List[List[float]]=None, feature_vector2: List[List[float]]=None, confidence: float=0, updated: datetime=None, created: datetime=None, etag: str=None, links: Links=None):  # noqa: E501
        """Snap - a model defined in Swagger

        :param id: The id of this Snap.  # noqa: E501
        :type id: str
        :param snap: The snap of this Snap.  # noqa: E501
        :type snap: str
        :param full_snap: The full_snap of this Snap.  # noqa: E501
        :type full_snap: str
        :param snap_id: The snap_id of this Snap.  # noqa: E501
        :type snap_id: str
        :param snap_time_stamp: The snap_time_stamp of this Snap.  # noqa: E501
        :type snap_time_stamp: int
        :param process_count: The process_count of this Snap.  # noqa: E501
        :type process_count: int
        :param registered_face_id: The registered_face_id of this Snap.  # noqa: E501
        :type registered_face_id: str
        :param feature_vector1: The feature_vector1 of this Snap.  # noqa: E501
        :type feature_vector1: List[List[float]]
        :param feature_vector2: The feature_vector2 of this Snap.  # noqa: E501
        :type feature_vector2: List[List[float]]
        :param confidence: The confidence of this Snap.  # noqa: E501
        :type confidence: float
        :param updated: The updated of this Snap.  # noqa: E501
        :type updated: datetime
        :param created: The created of this Snap.  # noqa: E501
        :type created: datetime
        :param etag: The etag of this Snap.  # noqa: E501
        :type etag: str
        :param links: The links of this Snap.  # noqa: E501
        :type links: Links
        """
        self.swagger_types = {
            'id': str,
            'snap': str,
            'full_snap': str,
            'snap_id': str,
            'snap_time_stamp': int,
            'process_count': int,
            'registered_face_id': str,
            'feature_vector1': List[List[float]],
            'feature_vector2': List[List[float]],
            'confidence': float,
            'updated': datetime,
            'created': datetime,
            'etag': str,
            'links': Links
        }

        self.attribute_map = {
            'id': '_id',
            'snap': 'snap',
            'full_snap': 'fullSnap',
            'snap_id': 'snapId',
            'snap_time_stamp': 'snapTimeStamp',
            'process_count': 'processCount',
            'registered_face_id': 'registeredFaceId',
            'feature_vector1': 'featureVector1',
            'feature_vector2': 'featureVector2',
            'confidence': 'confidence',
            'updated': 'updated',
            'created': 'created',
            'etag': 'etag',
            'links': 'links'
        }
        self._id = id
        self._snap = snap
        self._full_snap = full_snap
        self._snap_id = snap_id
        self._snap_time_stamp = snap_time_stamp
        self._process_count = process_count
        self._registered_face_id = registered_face_id
        self._feature_vector1 = feature_vector1
        self._feature_vector2 = feature_vector2
        self._confidence = confidence
        self._updated = updated
        self._created = created
        self._etag = etag
        self._links = links

    @classmethod
    def from_dict(cls, dikt) -> 'Snap':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The snap of this Snap.  # noqa: E501
        :rtype: Snap
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this Snap.


        :return: The id of this Snap.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this Snap.


        :param id: The id of this Snap.
        :type id: str
        """

        self._id = id

    @property
    def snap(self) -> str:
        """Gets the snap of this Snap.


        :return: The snap of this Snap.
        :rtype: str
        """
        return self._snap

    @snap.setter
    def snap(self, snap: str):
        """Sets the snap of this Snap.


        :param snap: The snap of this Snap.
        :type snap: str
        """

        self._snap = snap

    @property
    def full_snap(self) -> str:
        """Gets the full_snap of this Snap.


        :return: The full_snap of this Snap.
        :rtype: str
        """
        return self._full_snap

    @full_snap.setter
    def full_snap(self, full_snap: str):
        """Sets the full_snap of this Snap.


        :param full_snap: The full_snap of this Snap.
        :type full_snap: str
        """

        self._full_snap = full_snap

    @property
    def snap_id(self) -> str:
        """Gets the snap_id of this Snap.


        :return: The snap_id of this Snap.
        :rtype: str
        """
        return self._snap_id

    @snap_id.setter
    def snap_id(self, snap_id: str):
        """Sets the snap_id of this Snap.


        :param snap_id: The snap_id of this Snap.
        :type snap_id: str
        """

        self._snap_id = snap_id

    @property
    def snap_time_stamp(self) -> int:
        """Gets the snap_time_stamp of this Snap.

        Unix timestamp when snap is taken  # noqa: E501

        :return: The snap_time_stamp of this Snap.
        :rtype: int
        """
        return self._snap_time_stamp

    @snap_time_stamp.setter
    def snap_time_stamp(self, snap_time_stamp: int):
        """Sets the snap_time_stamp of this Snap.

        Unix timestamp when snap is taken  # noqa: E501

        :param snap_time_stamp: The snap_time_stamp of this Snap.
        :type snap_time_stamp: int
        """

        self._snap_time_stamp = snap_time_stamp

    @property
    def process_count(self) -> int:
        """Gets the process_count of this Snap.


        :return: The process_count of this Snap.
        :rtype: int
        """
        return self._process_count

    @process_count.setter
    def process_count(self, process_count: int):
        """Sets the process_count of this Snap.


        :param process_count: The process_count of this Snap.
        :type process_count: int
        """

        self._process_count = process_count

    @property
    def registered_face_id(self) -> str:
        """Gets the registered_face_id of this Snap.


        :return: The registered_face_id of this Snap.
        :rtype: str
        """
        return self._registered_face_id

    @registered_face_id.setter
    def registered_face_id(self, registered_face_id: str):
        """Sets the registered_face_id of this Snap.


        :param registered_face_id: The registered_face_id of this Snap.
        :type registered_face_id: str
        """

        self._registered_face_id = registered_face_id

    @property
    def feature_vector1(self) -> List[List[float]]:
        """Gets the feature_vector1 of this Snap.


        :return: The feature_vector1 of this Snap.
        :rtype: List[List[float]]
        """
        return self._feature_vector1

    @feature_vector1.setter
    def feature_vector1(self, feature_vector1: List[List[float]]):
        """Sets the feature_vector1 of this Snap.


        :param feature_vector1: The feature_vector1 of this Snap.
        :type feature_vector1: List[List[float]]
        """

        self._feature_vector1 = feature_vector1

    @property
    def feature_vector2(self) -> List[List[float]]:
        """Gets the feature_vector2 of this Snap.


        :return: The feature_vector2 of this Snap.
        :rtype: List[List[float]]
        """
        return self._feature_vector2

    @feature_vector2.setter
    def feature_vector2(self, feature_vector2: List[List[float]]):
        """Sets the feature_vector2 of this Snap.


        :param feature_vector2: The feature_vector2 of this Snap.
        :type feature_vector2: List[List[float]]
        """

        self._feature_vector2 = feature_vector2

    @property
    def confidence(self) -> float:
        """Gets the confidence of this Snap.


        :return: The confidence of this Snap.
        :rtype: float
        """
        return self._confidence

    @confidence.setter
    def confidence(self, confidence: float):
        """Sets the confidence of this Snap.


        :param confidence: The confidence of this Snap.
        :type confidence: float
        """

        self._confidence = confidence

    @property
    def updated(self) -> datetime:
        """Gets the updated of this Snap.


        :return: The updated of this Snap.
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated: datetime):
        """Sets the updated of this Snap.


        :param updated: The updated of this Snap.
        :type updated: datetime
        """

        self._updated = updated

    @property
    def created(self) -> datetime:
        """Gets the created of this Snap.


        :return: The created of this Snap.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created: datetime):
        """Sets the created of this Snap.


        :param created: The created of this Snap.
        :type created: datetime
        """

        self._created = created

    @property
    def etag(self) -> str:
        """Gets the etag of this Snap.


        :return: The etag of this Snap.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag: str):
        """Sets the etag of this Snap.


        :param etag: The etag of this Snap.
        :type etag: str
        """

        self._etag = etag

    @property
    def links(self) -> Links:
        """Gets the links of this Snap.


        :return: The links of this Snap.
        :rtype: Links
        """
        return self._links

    @links.setter
    def links(self, links: Links):
        """Sets the links of this Snap.


        :param links: The links of this Snap.
        :type links: Links
        """

        self._links = links
