# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.evidence_config import EvidenceConfig  # noqa: F401,E501
from swagger_server.models.schedule_source import ScheduleSource  # noqa: F401,E501
from swagger_server.models.source_end_point_source_list import SourceEndPointSourceList  # noqa: F401,E501
from swagger_server import util


class SourceEndPoint(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, source_list: List[SourceEndPointSourceList]=None, start_time_stamp: int=None, end_time_stamp: int=None, snaps: List[EvidenceConfig]=None, clips: List[EvidenceConfig]=None, schedule: List[List[ScheduleSource]]=None):  # noqa: E501
        """SourceEndPoint - a model defined in Swagger

        :param source_list: The source_list of this SourceEndPoint.  # noqa: E501
        :type source_list: List[SourceEndPointSourceList]
        :param start_time_stamp: The start_time_stamp of this SourceEndPoint.  # noqa: E501
        :type start_time_stamp: int
        :param end_time_stamp: The end_time_stamp of this SourceEndPoint.  # noqa: E501
        :type end_time_stamp: int
        :param snaps: The snaps of this SourceEndPoint.  # noqa: E501
        :type snaps: List[EvidenceConfig]
        :param clips: The clips of this SourceEndPoint.  # noqa: E501
        :type clips: List[EvidenceConfig]
        :param schedule: The schedule of this SourceEndPoint.  # noqa: E501
        :type schedule: List[List[ScheduleSource]]
        """
        self.swagger_types = {
            'source_list': List[SourceEndPointSourceList],
            'start_time_stamp': int,
            'end_time_stamp': int,
            'snaps': List[EvidenceConfig],
            'clips': List[EvidenceConfig],
            'schedule': List[List[ScheduleSource]]
        }

        self.attribute_map = {
            'source_list': 'sourceList',
            'start_time_stamp': 'startTimeStamp',
            'end_time_stamp': 'endTimeStamp',
            'snaps': 'snaps',
            'clips': 'clips',
            'schedule': 'schedule'
        }
        self._source_list = source_list
        self._start_time_stamp = start_time_stamp
        self._end_time_stamp = end_time_stamp
        self._snaps = snaps
        self._clips = clips
        self._schedule = schedule

    @classmethod
    def from_dict(cls, dikt) -> 'SourceEndPoint':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The sourceEndPoint of this SourceEndPoint.  # noqa: E501
        :rtype: SourceEndPoint
        """
        return util.deserialize_model(dikt, cls)

    @property
    def source_list(self) -> List[SourceEndPointSourceList]:
        """Gets the source_list of this SourceEndPoint.


        :return: The source_list of this SourceEndPoint.
        :rtype: List[SourceEndPointSourceList]
        """
        return self._source_list

    @source_list.setter
    def source_list(self, source_list: List[SourceEndPointSourceList]):
        """Sets the source_list of this SourceEndPoint.


        :param source_list: The source_list of this SourceEndPoint.
        :type source_list: List[SourceEndPointSourceList]
        """

        self._source_list = source_list

    @property
    def start_time_stamp(self) -> int:
        """Gets the start_time_stamp of this SourceEndPoint.

        Process the source types FROM this unix timestamp  # noqa: E501

        :return: The start_time_stamp of this SourceEndPoint.
        :rtype: int
        """
        return self._start_time_stamp

    @start_time_stamp.setter
    def start_time_stamp(self, start_time_stamp: int):
        """Sets the start_time_stamp of this SourceEndPoint.

        Process the source types FROM this unix timestamp  # noqa: E501

        :param start_time_stamp: The start_time_stamp of this SourceEndPoint.
        :type start_time_stamp: int
        """

        self._start_time_stamp = start_time_stamp

    @property
    def end_time_stamp(self) -> int:
        """Gets the end_time_stamp of this SourceEndPoint.

        Process the source types TILL this unix timestamp  # noqa: E501

        :return: The end_time_stamp of this SourceEndPoint.
        :rtype: int
        """
        return self._end_time_stamp

    @end_time_stamp.setter
    def end_time_stamp(self, end_time_stamp: int):
        """Sets the end_time_stamp of this SourceEndPoint.

        Process the source types TILL this unix timestamp  # noqa: E501

        :param end_time_stamp: The end_time_stamp of this SourceEndPoint.
        :type end_time_stamp: int
        """

        self._end_time_stamp = end_time_stamp

    @property
    def snaps(self) -> List[EvidenceConfig]:
        """Gets the snaps of this SourceEndPoint.


        :return: The snaps of this SourceEndPoint.
        :rtype: List[EvidenceConfig]
        """
        return self._snaps

    @snaps.setter
    def snaps(self, snaps: List[EvidenceConfig]):
        """Sets the snaps of this SourceEndPoint.


        :param snaps: The snaps of this SourceEndPoint.
        :type snaps: List[EvidenceConfig]
        """

        self._snaps = snaps

    @property
    def clips(self) -> List[EvidenceConfig]:
        """Gets the clips of this SourceEndPoint.


        :return: The clips of this SourceEndPoint.
        :rtype: List[EvidenceConfig]
        """
        return self._clips

    @clips.setter
    def clips(self, clips: List[EvidenceConfig]):
        """Sets the clips of this SourceEndPoint.


        :param clips: The clips of this SourceEndPoint.
        :type clips: List[EvidenceConfig]
        """

        self._clips = clips

    @property
    def schedule(self) -> List[List[ScheduleSource]]:
        """Gets the schedule of this SourceEndPoint.


        :return: The schedule of this SourceEndPoint.
        :rtype: List[List[ScheduleSource]]
        """
        return self._schedule

    @schedule.setter
    def schedule(self, schedule: List[List[ScheduleSource]]):
        """Sets the schedule of this SourceEndPoint.


        :param schedule: The schedule of this SourceEndPoint.
        :type schedule: List[List[ScheduleSource]]
        """

        self._schedule = schedule
