# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.config import Config  # noqa: F401,E501
from swagger_server.models.line import Line  # noqa: F401,E501
from swagger_server.models.vertex import Vertex  # noqa: F401,E501
from swagger_server.models.zone_type import ZoneType  # noqa: F401,E501
from swagger_server import util


class Zone(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, zone_id: int=0, zone_type: ZoneType=None, number_of_vertices: int=4, vertices: List[Vertex]=None, line_setting: Line=None, config: List[Config]=None):  # noqa: E501
        """Zone - a model defined in Swagger

        :param zone_id: The zone_id of this Zone.  # noqa: E501
        :type zone_id: int
        :param zone_type: The zone_type of this Zone.  # noqa: E501
        :type zone_type: ZoneType
        :param number_of_vertices: The number_of_vertices of this Zone.  # noqa: E501
        :type number_of_vertices: int
        :param vertices: The vertices of this Zone.  # noqa: E501
        :type vertices: List[Vertex]
        :param line_setting: The line_setting of this Zone.  # noqa: E501
        :type line_setting: Line
        :param config: The config of this Zone.  # noqa: E501
        :type config: List[Config]
        """
        self.swagger_types = {
            'zone_id': int,
            'zone_type': ZoneType,
            'number_of_vertices': int,
            'vertices': List[Vertex],
            'line_setting': Line,
            'config': List[Config]
        }

        self.attribute_map = {
            'zone_id': 'zoneId',
            'zone_type': 'zoneType',
            'number_of_vertices': 'numberOfVertices',
            'vertices': 'vertices',
            'line_setting': 'lineSetting',
            'config': 'config'
        }
        self._zone_id = zone_id
        self._zone_type = zone_type
        self._number_of_vertices = number_of_vertices
        self._vertices = vertices
        self._line_setting = line_setting
        self._config = config

    @classmethod
    def from_dict(cls, dikt) -> 'Zone':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The zone of this Zone.  # noqa: E501
        :rtype: Zone
        """
        return util.deserialize_model(dikt, cls)

    @property
    def zone_id(self) -> int:
        """Gets the zone_id of this Zone.


        :return: The zone_id of this Zone.
        :rtype: int
        """
        return self._zone_id

    @zone_id.setter
    def zone_id(self, zone_id: int):
        """Sets the zone_id of this Zone.


        :param zone_id: The zone_id of this Zone.
        :type zone_id: int
        """

        self._zone_id = zone_id

    @property
    def zone_type(self) -> ZoneType:
        """Gets the zone_type of this Zone.


        :return: The zone_type of this Zone.
        :rtype: ZoneType
        """
        return self._zone_type

    @zone_type.setter
    def zone_type(self, zone_type: ZoneType):
        """Sets the zone_type of this Zone.


        :param zone_type: The zone_type of this Zone.
        :type zone_type: ZoneType
        """

        self._zone_type = zone_type

    @property
    def number_of_vertices(self) -> int:
        """Gets the number_of_vertices of this Zone.


        :return: The number_of_vertices of this Zone.
        :rtype: int
        """
        return self._number_of_vertices

    @number_of_vertices.setter
    def number_of_vertices(self, number_of_vertices: int):
        """Sets the number_of_vertices of this Zone.


        :param number_of_vertices: The number_of_vertices of this Zone.
        :type number_of_vertices: int
        """

        self._number_of_vertices = number_of_vertices

    @property
    def vertices(self) -> List[Vertex]:
        """Gets the vertices of this Zone.


        :return: The vertices of this Zone.
        :rtype: List[Vertex]
        """
        return self._vertices

    @vertices.setter
    def vertices(self, vertices: List[Vertex]):
        """Sets the vertices of this Zone.


        :param vertices: The vertices of this Zone.
        :type vertices: List[Vertex]
        """

        self._vertices = vertices

    @property
    def line_setting(self) -> Line:
        """Gets the line_setting of this Zone.


        :return: The line_setting of this Zone.
        :rtype: Line
        """
        return self._line_setting

    @line_setting.setter
    def line_setting(self, line_setting: Line):
        """Sets the line_setting of this Zone.


        :param line_setting: The line_setting of this Zone.
        :type line_setting: Line
        """

        self._line_setting = line_setting

    @property
    def config(self) -> List[Config]:
        """Gets the config of this Zone.


        :return: The config of this Zone.
        :rtype: List[Config]
        """
        return self._config

    @config.setter
    def config(self, config: List[Config]):
        """Sets the config of this Zone.


        :param config: The config of this Zone.
        :type config: List[Config]
        """

        self._config = config
